<?php

/**
 * @file
 * Module file for highres_image
 */

/**
 * @defgroup image_example Example: Image
 * @ingroup examples
 * @{
 * Demonstrates the basic use of image API.
 *
 * This module demonstrates the use of Drupal 7's new image styles and effects
 * including the following topics.
 *  - Define default image styles in code. Useful for modules that want to ship
 *    with predefined image styles and for site developers who want their image
 *    style configurations to be in version control.
 *    hook_image_default_styles().
 *  - Define new image effects. Demonstrates how a module can add additional
 *    effects to the options available when creating image styles.
 *    hook_image_effect_info().
 *  - Alter existing image styles. Demonstrates the use of
 *    hook_image_styles_alter() to modify existing image effects, especially
 *    those defined by other modules in hook_image_default_styles() without
 *    having to override the styles.
 *  - Demonstrates the use of hook_image_style_save() and
 *    hook_image_style_delete() to update module specific variables when an
 *    image style is either re-named or deleted.
 *  - Generate a form with a field of type #managed_file that allows the user
 *    to upload an image and choose a style to use when displaying that image.
 *  - Demonstrates the use of theme_image_style() to display images using an
 *    image style.
 *
 * @see hook_image_default_styles().
 * @see hook_image_effect_info().
 * @see hook_image_style_save().
 * @see hook_image_style_delete().
 * @see theme_image_style().
 */

/**
 * Implements hook_menu().
 *
 * Provide a menu item and a page to demonstrate features of this example
 * module.
 */
function highres_image_menu() {
  $items = array();
  $items['highres_image/styles'] = array(
    'title' => 'Image Example',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('highres_image_style_form'),
    'access arguments' => array('access content'),
    'file' => 'highres_image.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function highres_image_help($path) {
  switch ($path) {
    case 'highres_image/styles':
      $output =  '<p>' . t('Use this form to upload an image and choose an Image Style to use when displaying the image. This demonstrates basic use of the Drupal 7 Image styles & effects system.') . '</p>';
      $output .= '<p>' . t('Image styles can be added/edited using the !link.', array('!link' => l(t('Image styles UI'), 'admin/config/media/image-styles'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_image_effect_info().
 *
 * This hook allows your module to define additional image manipulation effects
 * that can be used with image styles.
 */
function highres_image_image_effect_info() {
  $effects = array();

  // The array is keyed on the machine-readable effect name.
  $effects['highres_image_save_effect'] = array(
    'label' => t('Save at highres'),
    'help' => t('Saves the image at double the resolution while trying to keep the file size small.'),
    // Name of function called to perform this effect.
    'effect callback' => 'highres_image_save_effect',
    'dimensions callback' => 'highres_image_resize_dimensions',
  );

  return $effects;
}


/**
 * Image effect callback; 
 *
 * @param $image
 *   An image object returned by image_load().
 * @param $data
 *   An array of attributes to use when performing the scale and crop effect
 *   with the following items:
 *   - "width": An integer representing the desired width in pixels.
 *   - "height": An integer representing the desired height in pixels.
 * @return
 *   TRUE on success. FALSE on failure
 * @see image_scale_and_crop()
 */
function highres_image_save_effect(&$image, $data) {
  dpm($image);
  
  $data += array(
    'width' => $image->info['width'] * 2,
    'height' => $image->info['height'] * 2,
  );
  
  dpm($data);
  
  return TRUE;
}

/**
 * Image dimensions callback;
 *
 * @param array $dimensions
 *   An array with the dimensions (in pixels) to be modified.
 * @param array $data
 *   An array of parameters for the autorotate effect (empty for this effect).
*/
function highres_image_resize_dimensions(&$dimensions, $data) {
  // We can only know the resulting dimensions if both dimensions are equal.
  // Otherwise we need to inspect the image itself, which is not passed in here.
  // (this callback was introduced to enhance performance by not accessing the
  // image file when rendering the width and height attributes of the html img
  // tag).
    
    $dimensions['width'] /= 2;
    $dimensions['height'] /= 2;
    
    dpm($dimensions);
}


/**
 * Implements hook_theme().
 */
function highres_image_theme() {
  return array(
    'highres_image_resize_summary' => array(
      'variables' => array('data' => NULL),
    ),
    'highres_image_image' => array(
      'variables' => array('image' => NULL, 'style' => NULL),
      'file' => 'highres_image.pages.inc',
    ),
  );
}

/**
 * @} End of "defgroup highres_image".
 */
